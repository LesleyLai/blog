---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Layout from "../layouts/BaseLayout.astro";
import MainContent from "../components/MainContent.astro";

import type { Language } from "../i18n/i18n";
import { isLanguage } from "../i18n/i18n";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

export const langFromSlug = (slug: CollectionEntry<"blog">["slug"]): Language => {
  let lang = slug.split("/")[0];
  if (!isLanguage(lang)) {
    throw new Error(`Unknown language contained in slug ${slug}`);
  }

  return lang;
};
const lang = langFromSlug(entry.slug);

const options: Intl.DateTimeFormatOptions = {
  year: "numeric",
  month: "long",
  day: "numeric",
};
const formatDate = (date: Date) => date.toLocaleDateString(lang, options);

const modified = entry.data.created.getTime() < entry.data.modified.getTime();
---

<Layout title={entry.data.title} lang={lang}>
  <MainContent>
    <h1>{entry.data.title}</h1>
    <div class="info">
      <span class="date">
        {modified ? `last modify: ${formatDate(entry.data.modified)} | ` : undefined}
        create: {formatDate(entry.data.created)}
      </span>
    </div>
    <Content />
  </MainContent>
</Layout>

<style>
  h1 {
    font-size: max(36px, 2em);
    line-height: 48px;
    font-weight: 400;
    margin: 100px 0;
  }

  .info {
    border-bottom: 1px solid var(--divider-color);
    padding-bottom: 4px;
    margin-bottom: 1rem;

    font-size: 13px;
  }

  .date {
    color: #797979;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  :global(.dark) .date {
    color: #b3b3b3;
  }
</style>
