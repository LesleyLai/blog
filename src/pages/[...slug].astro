---
import Layout from "@layouts/BaseLayout.astro";
import { translations } from "@i18n/translations";
import { langFromSlug, transformSlug } from "@i18n/i18n";
import { BLOG_POSTS } from "@content/blog";
import TagList from "@components/TagList.astro";
import "@styles/container.css";

export async function getStaticPaths() {
  return BLOG_POSTS.all.map((entry) => {
    const slug = transformSlug(entry.slug);

    return {
      params: { slug },
      props: { entry },
    };
  });
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const lang = langFromSlug(entry.slug);

const options: Intl.DateTimeFormatOptions = {
  year: "numeric",
  month: "long",
  day: "numeric",
};
const formatDate = (date: Date) => date.toLocaleDateString(lang, options);
---

<Layout title={entry.data.title}>
  <div class="container container-shadow">
    <main class="post-main">
      <h1>
        {entry.data.title}
        {entry.untranslated && <span class="untranslated">{translations[lang].untranslated}</span>}
      </h1>
      <div class="info">
        <span class="date">
          {entry.data.modified && `modify: ${formatDate(entry.data.modified)}`}
          create: {formatDate(entry.data.created)}
        </span>
        <span class="tags">
          <TagList tags={entry.data.tags} />
        </span>
      </div>
      <Content />
    </main>
  </div>
</Layout>

<style>
  .container {
    background-color: var(--sidenote-bg-color);
  }

  h1 {
    font-size: 36px;
    line-height: 48px;
    font-weight: 400;
    margin: 100px 0;
  }

  .untranslated {
    font-size: 0.8em;
  }

  .info {
    border-bottom: 1px solid var(--divider-color);
    padding-bottom: 4px;
    margin-bottom: 1rem;
    font-size: 13px;

    display: flex;
    justify-content: space-between;
  }

  .date {
    color: var(--secondary-color);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 12px;
    line-height: 24px;
  }

  /* sidenotes */
  main :global(aside) {
    color: var(--aside-text-color);
    padding: 5px 10px;
    font-size: 13px;

    margin-top: 0;
    margin-bottom: 20px;
    background: var(--aside-sm-bg-color);
    border: solid 1px var(--aside-sm-border-color);
    border-bottom: solid 1px var(--aside-sm-border-bottom-color);
    border-radius: 10px;
  }

  @media only screen and (max-width: 1087px) {
    main :global(aside) {
      margin-top: 0 !important;
    }
  }

  /* Tablets */
  @media only screen and (min-width: 481px) and (max-width: 768px) {
  }

  /* Larger tablets/small desktops */
  @media only screen and (min-width: 769px) and (max-width: 1087px) {
  }

  /* Desktops */
  @media only screen and (min-width: 1088px) {
    main {
      max-width: var(--blog-content-width);
    }

    main :global(aside) {
      position: absolute;
      width: calc(var(--container-width) - var(--blog-content-width) - 11px);
      background: none;
      padding: 0 0 0 16px;
      border-radius: 0;
      border: none;
      border-left: 8px solid var(--aside-lg-border-color);
      right: calc((100% - var(--container-width)) / 2 + 14px);
    }
  }
</style>
