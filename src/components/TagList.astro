---
import { translateTag } from "@i18n/translations";
import { getCurrentLanguage } from "@i18n/i18n";
import { translations } from "@i18n/translations";

import Tag from "./Tag.astro";

interface Props {
  // Tags can optionally have a count, which is used as the number of blog post or number of projects under this tag
  tags: string[] | { id: string; count: number }[];

  // To exclude a tag from the tag list
  exclude?: string;

  // Whether this tag list is for blog posts or projects
  type: "blogpost" | "project";

  // Whether having a "show all" button and its URL
  showall?: string;

  // Whether to enable search filter
  enableSearch?: boolean;
}

const lang = getCurrentLanguage(Astro);
const { tags, exclude, type, showall, enableSearch } = Astro.props;

const getTagId = (tag: string | { id: string; count: number }) => {
  if (typeof tag === "string") return tag;
  return tag.id;
};

const getTagUrl = (tag: string | { id: string; count: number }) => {
  return `/${lang}/${type === "blogpost" ? "tags" : "projects"}/${getTagId(tag)}`;
};
---

<ul>
  {
    showall && (
      <li>
        <Tag href={showall}>{translations[lang].showAll}</Tag>
      </li>
    )
  }
  {
    tags
      .filter((tag) => getTagId(tag) != exclude)
      .map((tag) => {
        const tagId = getTagId(tag);
        return (
          <li
            {...(enableSearch && {
              "data-pagefind-filter": `tag:${translateTag(lang, tagId, true)}`,
            })}
          >
            <Tag href={getTagUrl(tag)}>
              {translateTag(lang, tagId)}
              {typeof tag != "string" && ` ${tag.count}`}
            </Tag>
          </li>
        );
      })
  }
</ul>

<style>
  ul {
    list-style: none;
    margin: 0;

    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.4em;
  }

  li {
    margin-bottom: 0;
  }
</style>
