/*eslint sort-keys: "warn"*/

import type { Language } from "./i18n";
import { ALL_TAGS } from "@content/blog";

const en = {
  about: "About",
  aboutme: "About Me",
  ai: "AI",
  algorithms: "Algorithms",
  all: "All",
  archive: "Blog Archive",
  blog: "Blog",
  books: "Book Review",
  c: "C",
  cmake: "CMake",
  code: "Coding",
  compiler: "Compiler",
  cpp: "C++",
  createTime: "Created: ",
  csharp: "C#",
  cuda: "CUDA",
  designpattern: "Design Patterns",
  dod: "Data-Oriented Design",
  elm: "Elm",
  event: "Event",
  featuredProjects: "Featured Projects",
  functional: "Functional Programming",
  game: "Game",
  graphics: "Graphics",
  graphql: "GraphQL",
  home: "Home",
  i18n: "Internationalization",
  java: "Java",
  javascript: "Javascript",
  langName: "English",
  lastModified: "Last Modified: ",
  latestPosts: "Latest Posts",
  learning: "Learning",
  library: "Library",
  logic: "Logic",
  math: "Mathematics",
  myname: "Lesley Lai",
  notFound: "404 Not Found",
  notes: "Notes",
  ocaml: "OCaml",
  oop: "OOP",
  opengl: "OpenGL",
  opinion: "Opinion",
  oppositeLang: "zh" as Language,
  otherProjects: "Other Projects",
  personal: "Personal",
  physics: "Physics",
  pl: "Programming Languages",
  pldev: "Programming Language Development",
  portfolio: "Portfolio",
  portfolioDescription: "Check out all my personal projects below.",
  portfolioFilterHint: "Showing all projects. Click tags to filter by topic.",
  portfolioFilterHintTag: (tag: string, count: number) =>
    `Show ${count} projects filtered by ${translateTag("en", tag)}`,
  posts: "posts",
  python: "Python",
  racket: "Racket",
  rasterizer: "Rasterization",
  react: "React",
  rt: "Ray Tracing",
  rust: "Rust",
  scheme: "Scheme",
  showAll: "Show All",
  siteName: "Lesley Lai",
  stuffIWroteAbout: (tag: string) => `Stuff I wrote about ${en[tag as TranslationKey]}`,
  tags: "Tags",
  talks: "Talks",
  test: "Testing",
  typescript: "Typescript",
  untranslated: "(untranslated)",
  vulkan: "Vulkan",
  web: "Web",
  webgpu: "WebGPU",
  website: "Website",
  wgpu: "wgpu",
  x86: "x86",
};

// Make sure that all the tags are transla
for (const tag of ALL_TAGS) {
  if (!Object.keys(en).includes(tag)) {
    throw new Error(`Untranslated tag: ${tag}!`);
  }
}

export type Translations = typeof en;

export type TranslationKey = keyof Translations;

const zh: Translations = {
  about: "关于",
  aboutme: "关于我",
  ai: en.ai,
  algorithms: "算法",
  all: "所有",
  archive: "博文存档",
  blog: "博客",
  books: "书评",
  c: en.c,
  cmake: en.cmake,
  code: "编程",
  compiler: "编译器",
  cpp: en.cpp,
  createTime: "创建时间：",
  csharp: en.csharp,
  cuda: en.cuda,
  designpattern: "设计模式",
  dod: "面向数据设计",
  elm: en.elm,
  event: "活动",
  featuredProjects: "代表作",
  functional: "函数式编程",
  game: "游戏",
  graphics: "图形学",
  graphql: en.graphql,
  home: "主页",
  i18n: "国际化",
  java: en.java,
  javascript: en.javascript,
  langName: "中文",
  lastModified: "最近修改时间：",
  latestPosts: "最新文章",
  learning: "学习",
  library: "软件库",
  logic: "逻辑学",
  math: "数学",
  myname: "赖思理",
  notFound: "找不到页面",
  notes: "笔记",
  ocaml: en.ocaml,
  oop: "面向对象编程",
  opengl: en.opengl,
  opinion: "观点",
  oppositeLang: "en" as Language,
  otherProjects: "其他项目",
  personal: "个人相关",
  physics: "物理",
  pl: "编程语言",
  pldev: "编程语言开发",
  portfolio: "个人项目",
  portfolioDescription: "下列是我的一些个人项目",
  portfolioFilterHint: "正在显示所有项目。您可以通过标签来限定显示包含指定标签的项目。",
  portfolioFilterHintTag: (tag: string, count: number) =>
    `显示${count}个关于${translateTag("zh", tag)}的项目`,
  posts: "篇博文",
  python: en.python,
  racket: en.racket,
  rasterizer: "光栅化",
  react: en.react,
  rt: "光线追踪",
  rust: en.rust,
  scheme: en.scheme,
  showAll: "显示所有",
  siteName: "赖思理的个人网站",
  stuffIWroteAbout: (tag) => `关于${zh[tag as TranslationKey]}的博文`,
  tags: "标签",
  talks: "演讲",
  test: "软件测试",
  typescript: en.typescript,
  untranslated: "（未译）",
  vulkan: en.vulkan,
  web: en.web,
  webgpu: en.webgpu,
  website: "网站",
  wgpu: en.web,
  x86: en.x86,
};

export const translations: Record<Language, typeof en> = {
  en: en,
  zh: zh,
};

export const translateTag = (lang: Language, tag: string): string => {
  if (tag in translations.en) {
    return translations[lang][tag as TranslationKey] as string;
  }
  throw Error(`Failed to translate tag: ${tag}`);
};
